package com.example.cse5236.model

import android.util.Log
import com.google.android.gms.tasks.Task
import com.google.firebase.firestore.DocumentReference
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.QuerySnapshot


/*
TODO: FIGURE OUT ADD USER  & GET USER COUNT ISSUE
 */
class UserRepository() {

    private val db = FirebaseFirestore.getInstance()
    private val usersCollection = db.collection("Accounts")

    //adds user document with default difficulty field to Users
    fun addUser(username: String, account: Account): Task<Void> {
        Log.i("Repo", "UserRepository addUsers")
        val user = usersCollection.document(account.email).collection("Users").document(username)
        val userData = hashMapOf("difficulty" to "easy")
        return user.set(userData)
    }

    //returns Users collection containing user documents
    fun getUsers(account: Account): Task<QuerySnapshot> {
        Log.i("Repo", "UserRepository getUsers")
        return usersCollection.document(account.email).collection("Users").get()
    }

    /*
    USE THIS TEMPLATE FOR UPDATING A USER
    fun updateRENAMEME(username: String, map: Map<DataType, DataType>): Task<Void>{
        return users.document(username).update(map)
    }
 */

    //deletes document $username from Users collection
    fun deleteUser(username: String, account: Account): Task<Void> {
        Log.i("Repo", "UserRepository deleteUsers")
        return usersCollection.document(account.email).collection("Users").document(username).delete()
    }

//    //adds a document placeholder for Scores collection
//    fun addScorePlaceholder(username: String, account: Account): Task<DocumentReference> {
//        Log.i("Add Function", "addScorePlaceholder")
//        val user = usersCollection.document(account.email).collection("Users").document(username)
//        return user.collection("Scores").add("scorePlaceholder")
//    }

    //adds difficulty and points fields to an autogenerated score ID under the Scores collection
    fun addScore(username: String, account: Account, points: Number, difficulty: String): Task<DocumentReference>{
        Log.i("Repo", "UserRepository getUsers")
        val userScoreCollection = usersCollection.document(account.email).collection("Users").document(username).collection("Scores")
        val scoreData = hashMapOf("points" to points, "difficulty" to difficulty)
        return userScoreCollection.add(scoreData)
    }

    //returns Scores collection containing score documents
    fun getUserScores(username: String, account: Account): Task<QuerySnapshot> {
        Log.i("Repo", "UserRepository getUsers")
        val user = usersCollection.document(account.email).collection("Users").document(username)
        return user.collection("Scores").get()
    }


}